import torch
import torchvision
from torch.utils.data import DataLoader
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
import matplotlib.pyplot as plt
import numpy as np
from PIL import Image
import os

# 创建目录保存可视化结果
os.makedirs('visualizations', exist_ok=True)

# 数据集下载
from modelscope.msdatasets import MsDataset
from datasets import disable_caching

# 1. 禁用缓存
disable_caching()

try:
    # 2. 使用正确数据集名称
    ds = MsDataset.load('mnist', split='train', force_download=True)
    print("数据集加载成功！样本数:", len(ds))
    
except Exception as e:
    print(f"加载失败: {e}")
    
    # 3. 备用方案：使用 torchvision
    from torchvision.datasets import MNIST
    import torchvision.transforms as transforms
    
    transform = transforms.Compose([transforms.ToTensor()])
    ds = MNIST(root='./data', train=True, download=True, transform=transform)
    print(f"备用方案成功！样本数: {len(ds)}")

# 设置训练参数
n_epochs = 3
batch_size_train = 64
batch_size_test = 1000
learning_rate = 0.01
momentum = 0.5
log_interval = 10
random_seed = 1
torch.manual_seed(random_seed)

# 创建数据加载器
train_loader = torch.utils.data.DataLoader(
    torchvision.datasets.MNIST('./data/', train=True, download=True,
                               transform=torchvision.transforms.Compose([
                                   torchvision.transforms.ToTensor(),
                                   torchvision.transforms.Normalize(
                                       (0.1307,), (0.3081,))
                               ])),
    batch_size=batch_size_train, shuffle=True)

test_loader = torch.utils.data.DataLoader(
    torchvision.datasets.MNIST('./data/', train=False, download=True,
                               transform=torchvision.transforms.Compose([
                                   torchvision.transforms.ToTensor(),
                                   torchvision.transforms.Normalize(
                                       (0.1307,), (0.3081,))
                               ])),
    batch_size=batch_size_test, shuffle=True)

# 显示示例图像
examples = enumerate(test_loader)
batch_idx, (example_data, example_targets) = next(examples)

fig = plt.figure()
for i in range(6):
    plt.subplot(2, 3, i + 1)
    plt.tight_layout()
    plt.imshow(example_data[i][0], cmap='gray', interpolation='none')
    plt.title("Ground Truth: {}".format(example_targets[i]))
    plt.xticks([])
    plt.yticks([])
plt.show()

# 定义神经网络
class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.conv1 = nn.Conv2d(1, 10, kernel_size=5)
        self.conv2 = nn.Conv2d(10, 20, kernel_size=5)
        self.conv2_drop = nn.Dropout2d()
        self.fc1 = nn.Linear(320, 50)
        self.fc2 = nn.Linear(50, 10)

    def forward(self, x):
        x = F.relu(F.max_pool2d(self.conv1(x), 2))
        x = F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))
        x = x.view(-1, 320)
        x = F.relu(self.fc1(x))
        x = F.dropout(x, training=self.training)
        x = self.fc2(x)
        return F.log_softmax(x, dim=1)

# 初始化网络和优化器
network = Net()
optimizer = optim.SGD(network.parameters(), lr=learning_rate, momentum=momentum)

# 初始化训练和测试变量
train_losses = []
train_counter = []
test_losses = []
test_counter = [i * len(train_loader.dataset) for i in range(n_epochs + 1)]

# 训练函数
def train(epoch):
    network.train()
    for batch_idx, (data, target) in enumerate(train_loader):
        optimizer.zero_grad()
        output = network(data)
        loss = F.nll_loss(output, target)
        loss.backward()
        optimizer.step()
        if batch_idx % log_interval == 0:
            print('Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'.format(
                epoch, batch_idx * len(data), len(train_loader.dataset),
                100. * batch_idx / len(train_loader), loss.item()))
            train_losses.append(loss.item())
            train_counter.append(
                (batch_idx * 64) + ((epoch - 1) * len(train_loader.dataset)))
            torch.save(network.state_dict(), './model.pth')
            torch.save(optimizer.state_dict(), './optimizer.pth')

# 测试函数
def test():
    network.eval()
    test_loss = 0
    correct = 0
    with torch.no_grad():
        for data, target in test_loader:
            output = network(data)
            test_loss += F.nll_loss(output, target, reduction='sum').item()
            pred = output.data.max(1, keepdim=True)[1]
            correct += pred.eq(target.data.view_as(pred)).sum()
    test_loss /= len(test_loader.dataset)
    test_losses.append(test_loss)
    print('\nTest set: Avg. loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\n'.format(
        test_loss, correct, len(test_loader.dataset),
        100. * correct / len(test_loader.dataset)))

# 初始训练和测试
train(1)
test()

# 主训练循环
for epoch in range(1, n_epochs + 1):
    train(epoch)
    test()

# 增强的数据可视化函数
# 增强的数据可视化函数
def enhanced_visualization(train_loader, test_loader, network, 
                           train_losses, train_counter, test_losses, test_counter):
    print("开始增强数据可视化...")
    
    # 1. 数据集分布可视化
    try:
        train_labels = [target.item() for _, target in train_loader.dataset]
        test_labels = [target.item() for _, target in test_loader.dataset]
        
        plt.figure(figsize=(12, 5))
        
        plt.subplot(1, 2, 1)
        plt.hist(train_labels, bins=10, rwidth=0.8, color='skyblue')
        plt.title('Train Set Label Distribution')
        plt.xlabel('Digit Class')
        plt.ylabel('Count')
        plt.xticks(range(10))
        
        plt.subplot(1, 2, 2)
        plt.hist(test_labels, bins=10, rwidth=0.8, color='salmon')
        plt.title('Test Set Label Distribution')
        plt.xlabel('Digit Class')
        plt.ylabel('Count')
        plt.xticks(range(10))
        
        plt.tight_layout()
        plt.savefig('visualizations/dataset_distribution.png')
        plt.show()
        print("数据集分布可视化完成")
    except Exception as e:
        print(f"数据集分布可视化出错: {e}")

    # 2. 样本图像增强展示
    try:
        examples = enumerate(test_loader)
        batch_idx, (example_data, example_targets) = next(examples)
        
        plt.figure(figsize=(12, 8))
        for i in range(12):
            plt.subplot(3, 4, i + 1)
            plt.imshow(example_data[i][0], cmap='viridis', interpolation='none')
            plt.title(f"Label: {example_targets[i].item()}")
            plt.axis('off')
        plt.tight_layout()
        plt.savefig('visualizations/sample_images.png')
        plt.show()
        print("样本图像展示完成")
    except Exception as e:
        print(f"样本图像展示出错: {e}")
        # 如果出错，使用一个简单的示例继续
        example_data = torch.randn(12, 1, 28, 28)
        example_targets = torch.randint(0, 10, (12,))

    # 3. 特征图可视化
    try:
        sample_img = example_data[0].unsqueeze(0)
        
        # 创建钩子保存特征图
        activation = {}
        def get_activation(name):
            def hook(model, input, output):
                activation[name] = output.detach()
            return hook
        
        # 注册钩子
        network.conv1.register_forward_hook(get_activation('conv1'))
        network.conv2.register_forward_hook(get_activation('conv2'))
        
        # 前向传播获取特征图
        with torch.no_grad():
            network(sample_img)
        
        # 可视化第一层卷积特征图
        if 'conv1' in activation:
            conv1_activations = activation['conv1'][0]
            plt.figure(figsize=(12, 6))
            plt.suptitle('First Convolutional Layer Feature Maps', fontsize=16)
            for i in range(min(10, conv1_activations.shape[0])):
                plt.subplot(2, 5, i + 1)
                plt.imshow(conv1_activations[i], cmap='plasma')
                plt.title(f'Filter {i}')
                plt.axis('off')
            plt.tight_layout()
            plt.savefig('visualizations/conv1_features.png')
            plt.show()
            print("特征图可视化完成")
    except Exception as e:
        print(f"特征图可视化出错: {e}")
    
    # 4. 手动计算混淆矩阵
    try:
        all_preds = []
        all_targets = []
        
        network.eval()
        with torch.no_grad():
            for data, target in test_loader:
                output = network(data)
                pred = output.argmax(dim=1, keepdim=True)
                all_preds.extend(pred.cpu().numpy().flatten())
                all_targets.extend(target.cpu().numpy())
        
        # 手动创建混淆矩阵
        cm = np.zeros((10, 10), dtype=int)
        for true, pred in zip(all_targets, all_preds):
            cm[true][pred] += 1
        
        # 可视化混淆矩阵
        plt.figure(figsize=(10, 8))
        plt.imshow(cm, cmap='Blues')
        plt.colorbar()
        plt.title('Confusion Matrix')
        plt.xlabel('Predicted Label')
        plt.ylabel('True Label')
        plt.xticks(range(10))
        plt.yticks(range(10))
        
        # 添加数值标签
        for i in range(10):
            for j in range(10):
                plt.text(j, i, str(cm[i, j]), ha='center', va='center', color='red')
        
        plt.savefig('visualizations/confusion_matrix.png')
        plt.show()
        print("混淆矩阵可视化完成")
    except Exception as e:
        print(f"混淆矩阵可视化出错: {e}")
    
    # 5. 错误样本分析
    try:
        if 'all_targets' in locals() and 'all_preds' in locals():
            errors = []
            for i in range(len(all_targets)):
                if all_targets[i] != all_preds[i]:
                    errors.append((i, all_targets[i], all_preds[i]))
            
            # 只显示前12个错误样本
            if errors:
                plt.figure(figsize=(15, 10))
                plt.suptitle('Misclassified Examples', fontsize=16)
                
                # 确保不超过可用样本数
                num_errors = min(12, len(errors))
                for idx in range(num_errors):
                    error_idx, true_label, pred_label = errors[idx]
                    
                    # 获取错误样本
                    error_img = test_loader.dataset[error_idx][0].squeeze().numpy()
                    
                    plt.subplot(3, 4, idx + 1)
                    plt.imshow(error_img, cmap='gray_r')
                    plt.title(f'True: {true_label}\nPred: {pred_label}')
                    plt.axis('off')
                
                plt.tight_layout()
                plt.savefig('visualizations/misclassified_examples.png')
                plt.show()
                print("错误样本分析完成")
    except Exception as e:
        print(f"错误样本分析出错: {e}")
    
    # 6. 模型权重可视化
    try:
        if hasattr(network, 'conv1'):
            weights = network.conv1.weight.detach().cpu()
            plt.figure(figsize=(12, 6))
            plt.suptitle('First Convolutional Layer Filters', fontsize=16)
            for i in range(min(10, weights.shape[0])):
                plt.subplot(2, 5, i + 1)
                plt.imshow(weights[i][0], cmap='coolwarm')
                plt.title(f'Filter {i}')
                plt.axis('off')
            plt.tight_layout()
            plt.savefig('visualizations/conv_filters.png')
            plt.show()
            print("模型权重可视化完成")
    except Exception as e:
        print(f"模型权重可视化出错: {e}")
    
    # 7. 预测概率分布可视化
    try:
        with torch.no_grad():
            output = network(example_data[0:1])
            probabilities = F.softmax(output, dim=1)[0].numpy()
        
        plt.figure(figsize=(10, 6))
        plt.bar(range(10), probabilities, color='purple')
        plt.title(f'Prediction Probabilities for True Label {example_targets[0].item()}')
        plt.xlabel('Digit Class')
        plt.ylabel('Probability')
        plt.xticks(range(10))
        plt.ylim(0, 1)
        plt.grid(axis='y', linestyle='--', alpha=0.7)
        plt.savefig('visualizations/prediction_probabilities.png')
        plt.show()
        print("预测概率分布可视化完成")
    except Exception as e:
        print(f"预测概率分布可视化出错: {e}")
    
    # 8. 训练和测试损失曲线
    try:
        plt.figure(figsize=(10, 6))
        plt.plot(train_counter, train_losses, 'b-', label='Train Loss')
        plt.plot(test_counter, test_losses, 'r-', label='Test Loss')
        plt.title('Training and Test Loss')
        plt.xlabel('Number of training examples seen')
        plt.ylabel('Negative log likelihood loss')
        plt.legend()
        plt.grid(True)
        plt.savefig('visualizations/loss_curves.png')
        plt.show()
        print("损失曲线可视化完成")
    except Exception as e:
        print(f"损失曲线可视化出错: {e}")
    
    # 9. 保存模型结构图（简化版）
    try:
        plt.figure(figsize=(10, 6))
        plt.text(0.1, 0.5, str(network), fontsize=10, family='monospace')
        plt.axis('off')
        plt.title('Model Architecture')
        plt.savefig('visualizations/model_architecture.png')
        plt.show()
        print("模型结构图保存完成")
    except Exception as e:
        print(f"模型结构图保存出错: {e}")
    
    print("增强数据可视化完成！")

# 调用增强数据可视化函数
enhanced_visualization(
    train_loader, 
    test_loader, 
    network, 
    train_losses, 
    train_counter, 
    test_losses, 
    test_counter
)